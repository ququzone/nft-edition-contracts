{
  "address": "0xC2Ab6976EADa8BD06F33760C152D74055ABa446D",
  "abi": [
    {
      "inputs": [],
      "name": "Access_OnlyAdmin",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newDescription",
          "type": "string"
        }
      ],
      "name": "DescriptionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "animationURI",
          "type": "string"
        }
      ],
      "name": "EditionInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "animationURI",
          "type": "string"
        }
      ],
      "name": "MediaURIsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initializeWithData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfos",
      "outputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newDescription",
          "type": "string"
        }
      ],
      "name": "updateDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationURI",
          "type": "string"
        }
      ],
      "name": "updateMediaURIs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd733e65532d608c0d9bdebbd5f614ce802ac01afad909cd058f97a36e72ee64",
  "receipt": {
    "to": null,
    "from": "0x7c029553644F5E9442cb576c1056e0f7663Db1Fa",
    "contractAddress": "0xC2Ab6976EADa8BD06F33760C152D74055ABa446D",
    "transactionIndex": 0,
    "gasUsed": "2470115",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0f4484a52b1a20d2f40eacaf5e9d29a56df27526fda8d54b5b19f9106ab3652f",
    "transactionHash": "0xdd733e65532d608c0d9bdebbd5f614ce802ac01afad909cd058f97a36e72ee64",
    "logs": [],
    "blockNumber": 20646066,
    "cumulativeGasUsed": "2470115",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4f5948489c408dfb5f1dd098ca1442f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Access_OnlyAdmin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"DescriptionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"name\":\"EditionInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"name\":\"MediaURIsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initializeWithData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"updateDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"name\":\"updateMediaURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DescriptionUpdated(address,address,string)\":{\"details\":\"admin function indexer feedback\"},\"EditionInitialized(address,string,string,string)\":{\"details\":\"admin function indexer feedback\"}},\"kind\":\"dev\",\"methods\":{\"contractURI()\":{\"returns\":{\"_0\":\"contract uri (if set)\"}},\"initializeWithData(bytes)\":{\"params\":{\"data\":\"data to init with\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"to get uri for\"},\"returns\":{\"_0\":\"contract uri (if set)\"}},\"updateDescription(address,string)\":{\"params\":{\"newDescription\":\"new description\",\"target\":\"target description\"}},\"updateMediaURIs(address,string,string)\":{\"params\":{\"animationURI\":\"new animation uri address\",\"imageURI\":\"new image uri address\",\"target\":\"target for contract to update metadata for\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DescriptionUpdated(address,address,string)\":{\"notice\":\"Description updated for this edition\"},\"EditionInitialized(address,string,string,string)\":{\"notice\":\"Event for a new edition initialized\"},\"MediaURIsUpdated(address,address,string,string)\":{\"notice\":\"Event for updated Media URIs\"}},\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"Contract URI information getter\"},\"initializeWithData(bytes)\":{\"notice\":\"Default initializer for edition data from a specific contract\"},\"tokenInfos(address)\":{\"notice\":\"Token information mapping storage\"},\"tokenURI(uint256)\":{\"notice\":\"Token URI information getter\"},\"updateDescription(address,string)\":{\"notice\":\"Admin function to update description\"},\"updateMediaURIs(address,string,string)\":{\"notice\":\"Update media URIs\"}},\"notice\":\"EditionMetadataRenderer for editions support\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/metadata/EditionMetadataRenderer.sol\":\"EditionMetadataRenderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x1e88abdf82fcbbf98f97be17ea56c924376350637896bc37366ec9f89b7c2628\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"src/interfaces/IERC721Drop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IMetadataRenderer.sol\\\";\\n\\ninterface IERC721Drop {\\n    // Access errors\\n\\n    /// @notice Only admin can access this function\\n    error Access_OnlyAdmin();\\n    /// @notice Missing the given role or admin access\\n    error Access_MissingRoleOrAdmin(bytes32 role);\\n    /// @notice Withdraw is not allowed by this user\\n    error Access_WithdrawNotAllowed();\\n    /// @notice Cannot withdraw funds due to ETH send failure.\\n    error Withdraw_FundsSendFailure();\\n    /// @notice Mint fee send failure\\n    error MintFee_FundsSendFailure();\\n\\n    /// @notice Call to external metadata renderer failed.\\n    error ExternalMetadataRenderer_CallFailed();\\n\\n    // Sale/Purchase errors\\n    /// @notice Sale is inactive\\n    error Sale_Inactive();\\n    /// @notice Presale is inactive\\n    error Presale_Inactive();\\n    /// @notice Presale merkle root is invalid\\n    error Presale_MerkleNotApproved();\\n    /// @notice Wrong price for purchase\\n    error Purchase_WrongPrice(uint256 correctPrice);\\n    /// @notice NFT sold out\\n    error Mint_SoldOut();\\n    /// @notice Too many purchase for address\\n    error Purchase_TooManyForAddress();\\n    /// @notice Too many presale for address\\n    error Presale_TooManyForAddress();\\n\\n    // Admin errors\\n    /// @notice Royalty percentage too high\\n    error Setup_RoyaltyPercentageTooHigh(uint16 maxRoyaltyBPS);\\n    /// @notice Invalid admin upgrade address\\n    error Admin_InvalidUpgradeAddress(address proposedAddress);\\n    /// @notice Unable to finalize an edition not marked as open (size set to uint64_max_value)\\n    error Admin_UnableToFinalizeNotOpenEdition();\\n\\n    /// @notice Event emitted for mint fee payout\\n    /// @param mintFeeAmount amount of the mint fee\\n    /// @param mintFeeRecipient recipient of the mint fee\\n    /// @param success if the payout succeeded\\n    event MintFeePayout(uint256 mintFeeAmount, address mintFeeRecipient, bool success);\\n\\n    /// @notice Event emitted for each sale\\n    /// @param to address sale was made to\\n    /// @param quantity quantity of the minted nfts\\n    /// @param pricePerToken price for each token\\n    /// @param firstPurchasedTokenId first purchased token ID (to get range add to quantity for max)\\n    event Sale(\\n        address indexed to,\\n        uint256 indexed quantity,\\n        uint256 indexed pricePerToken,\\n        uint256 firstPurchasedTokenId\\n    );\\n\\n    /// @notice Event emitted for each sale\\n    /// @param sender address sale was made to\\n    /// @param tokenContract address of the token contract\\n    /// @param tokenId first purchased token ID (to get range add to quantity for max)\\n    /// @param quantity quantity of the minted nfts\\n    /// @param comment caller provided comment\\n    event MintComment(\\n        address indexed sender,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId,\\n        uint256 quantity,\\n        string comment\\n    );\\n\\n    /// @notice Sales configuration has been changed\\n    /// @dev To access new sales configuration, use getter function.\\n    /// @param changedBy Changed by user\\n    event SalesConfigChanged(address indexed changedBy);\\n\\n    /// @notice Event emitted when the funds recipient is changed\\n    /// @param newAddress new address for the funds recipient\\n    /// @param changedBy address that the recipient is changed by\\n    event FundsRecipientChanged(address indexed newAddress, address indexed changedBy);\\n\\n    /// @notice Event emitted when the funds are withdrawn from the minting contract\\n    /// @param withdrawnBy address that issued the withdraw\\n    /// @param withdrawnTo address that the funds were withdrawn to\\n    /// @param amount amount that was withdrawn\\n    /// @param feeRecipient user getting withdraw fee (if any)\\n    /// @param feeAmount amount of the fee getting sent (if any)\\n    event FundsWithdrawn(\\n        address indexed withdrawnBy,\\n        address indexed withdrawnTo,\\n        uint256 amount,\\n        address feeRecipient,\\n        uint256 feeAmount\\n    );\\n\\n    /// @notice Event emitted when an open mint is finalized and further minting is closed forever on the contract.\\n    /// @param sender address sending close mint\\n    /// @param numberOfMints number of mints the contract is finalized at\\n    event OpenMintFinalized(address indexed sender, uint256 numberOfMints);\\n\\n    /// @notice Event emitted when metadata renderer is updated.\\n    /// @param sender address of the updater\\n    /// @param renderer new metadata renderer address\\n    event UpdatedMetadataRenderer(address sender, IMetadataRenderer renderer);\\n\\n    /// @notice Admin function to update the sales configuration settings\\n    /// @param publicSalePrice public sale price in ether\\n    /// @param maxSalePurchasePerAddress Max # of purchases (public) per address allowed\\n    /// @param publicSaleStart unix timestamp when the public sale starts\\n    /// @param publicSaleEnd unix timestamp when the public sale ends (set to 0 to disable)\\n    /// @param presaleStart unix timestamp when the presale starts\\n    /// @param presaleEnd unix timestamp when the presale ends\\n    /// @param presaleMerkleRoot merkle root for the presale information\\n    function setSaleConfiguration(\\n        uint104 publicSalePrice,\\n        uint32 maxSalePurchasePerAddress,\\n        uint64 publicSaleStart,\\n        uint64 publicSaleEnd,\\n        uint64 presaleStart,\\n        uint64 presaleEnd,\\n        bytes32 presaleMerkleRoot\\n    ) external;\\n\\n    /// @notice General configuration for NFT Minting and bookkeeping\\n    struct Configuration {\\n        /// @dev Metadata renderer (uint160)\\n        IMetadataRenderer metadataRenderer;\\n        /// @dev Total size of edition that can be minted (uint160+64 = 224)\\n        uint64 editionSize;\\n        /// @dev Royalty amount in bps (uint224+16 = 240)\\n        uint16 royaltyBPS;\\n        /// @dev Funds recipient for sale (new slot, uint160)\\n        address payable fundsRecipient;\\n    }\\n\\n    /// @notice Sales states and configuration\\n    /// @dev Uses 3 storage slots\\n    struct SalesConfiguration {\\n        /// @dev Public sale price (max ether value > 1000 ether with this value)\\n        uint104 publicSalePrice;\\n        /// @notice Purchase mint limit per address (if set to 0 === unlimited mints)\\n        /// @dev Max purchase number per txn (90+32 = 122)\\n        uint32 maxSalePurchasePerAddress;\\n        /// @dev uint64 type allows for dates into 292 billion years\\n        /// @notice Public sale start timestamp (136+64 = 186)\\n        uint64 publicSaleStart;\\n        /// @notice Public sale end timestamp (186+64 = 250)\\n        uint64 publicSaleEnd;\\n        /// @notice Presale start timestamp\\n        /// @dev new storage slot\\n        uint64 presaleStart;\\n        /// @notice Presale end timestamp\\n        uint64 presaleEnd;\\n        /// @notice Presale merkle root\\n        bytes32 presaleMerkleRoot;\\n    }\\n\\n    /// @notice Return value for sales details to use with front-ends\\n    struct SaleDetails {\\n        // Synthesized status variables for sale and presale\\n        bool publicSaleActive;\\n        bool presaleActive;\\n        // Price for public sale\\n        uint256 publicSalePrice;\\n        // Timed sale actions for public sale\\n        uint64 publicSaleStart;\\n        uint64 publicSaleEnd;\\n        // Timed sale actions for presale\\n        uint64 presaleStart;\\n        uint64 presaleEnd;\\n        // Merkle root (includes address, quantity, and price data for each entry)\\n        bytes32 presaleMerkleRoot;\\n        // Limit public sale to a specific number of mints per wallet\\n        uint256 maxSalePurchasePerAddress;\\n        // Information about the rest of the supply\\n        // Total that have been minted\\n        uint256 totalMinted;\\n        // The total supply available\\n        uint256 maxSupply;\\n    }\\n\\n    /// @notice Return type of specific mint counts and details per address\\n    struct AddressMintDetails {\\n        /// Number of total mints from the given address\\n        uint256 totalMints;\\n        /// Number of presale mints from the given address\\n        uint256 presaleMints;\\n        /// Number of public mints from the given address\\n        uint256 publicMints;\\n    }\\n\\n    /// @notice External purchase function (payable in eth)\\n    /// @param quantity to purchase\\n    /// @return first minted token ID\\n    function purchase(uint256 quantity) external payable returns (uint256);\\n\\n    /// @notice External purchase presale function (takes a merkle proof and matches to root) (payable in eth)\\n    /// @param quantity to purchase\\n    /// @param maxQuantity can purchase (verified by merkle root)\\n    /// @param pricePerToken price per token allowed (verified by merkle root)\\n    /// @param merkleProof input for merkle proof leaf verified by merkle root\\n    /// @return first minted token ID\\n    function purchasePresale(\\n        uint256 quantity,\\n        uint256 maxQuantity,\\n        uint256 pricePerToken,\\n        bytes32[] memory merkleProof\\n    ) external payable returns (uint256);\\n\\n    /// @notice Function to return the global sales details for the given drop\\n    function saleDetails() external view returns (SaleDetails memory);\\n\\n    /// @notice Function to return the specific sales details for a given address\\n    /// @param minter address for minter to return mint information for\\n    function mintedPerAddress(address minter) external view returns (AddressMintDetails memory);\\n\\n    /// @notice This is the opensea/public owner setting that can be set by the contract admin\\n    function owner() external view returns (address);\\n\\n    /// @notice Update the metadata renderer\\n    /// @param newRenderer new address for renderer\\n    /// @param setupRenderer data to call to bootstrap data for the new renderer (optional)\\n    function setMetadataRenderer(IMetadataRenderer newRenderer, bytes memory setupRenderer) external;\\n\\n    /// @notice This is an admin mint function to mint a quantity to a specific address\\n    /// @param to address to mint to\\n    /// @param quantity quantity to mint\\n    /// @return the id of the first minted NFT\\n    function adminMint(address to, uint256 quantity) external returns (uint256);\\n\\n    /// @notice This is an admin mint function to mint a single nft each to a list of addresses\\n    /// @param to list of addresses to mint an NFT each to\\n    /// @return the id of the first minted NFT\\n    function adminMintAirdrop(address[] memory to) external returns (uint256);\\n\\n    /// @dev Getter for admin role associated with the contract to handle metadata\\n    /// @return boolean if address is admin\\n    function isAdmin(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x60b6f6ddcfec7ebc28835956e0f6dedcf7616e97edd0034ed66e0b0183312321\",\"license\":\"MIT\"},\"src/interfaces/IMetadataRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IMetadataRenderer {\\n    function tokenURI(uint256) external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function initializeWithData(bytes memory initData) external;\\n}\\n\",\"keccak256\":\"0xd73a5fcff6eb14cd9b0a1449fb611d4598134abe380c83cb62471f763eb6dd27\",\"license\":\"MIT\"},\"src/metadata/EditionMetadataRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IMetadataRenderer} from \\\"../interfaces/IMetadataRenderer.sol\\\";\\nimport {IERC721Drop} from \\\"../interfaces/IERC721Drop.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport {NFTMetadataRenderer} from \\\"../utils/NFTMetadataRenderer.sol\\\";\\nimport {MetadataRenderAdminCheck} from \\\"./MetadataRenderAdminCheck.sol\\\";\\n\\ninterface DropConfigGetter {\\n    function config() external view returns (IERC721Drop.Configuration memory config);\\n}\\n\\n/// @notice EditionMetadataRenderer for editions support\\ncontract EditionMetadataRenderer is IMetadataRenderer, MetadataRenderAdminCheck {\\n    /// @notice Storage for token edition information\\n    struct TokenEditionInfo {\\n        string description;\\n        string imageURI;\\n        string animationURI;\\n    }\\n\\n    /// @notice Event for updated Media URIs\\n    event MediaURIsUpdated(address indexed target, address sender, string imageURI, string animationURI);\\n\\n    /// @notice Event for a new edition initialized\\n    /// @dev admin function indexer feedback\\n    event EditionInitialized(address indexed target, string description, string imageURI, string animationURI);\\n\\n    /// @notice Description updated for this edition\\n    /// @dev admin function indexer feedback\\n    event DescriptionUpdated(address indexed target, address sender, string newDescription);\\n\\n    /// @notice Token information mapping storage\\n    mapping(address => TokenEditionInfo) public tokenInfos;\\n\\n    /// @notice Update media URIs\\n    /// @param target target for contract to update metadata for\\n    /// @param imageURI new image uri address\\n    /// @param animationURI new animation uri address\\n    function updateMediaURIs(\\n        address target,\\n        string memory imageURI,\\n        string memory animationURI\\n    ) external requireSenderAdmin(target) {\\n        tokenInfos[target].imageURI = imageURI;\\n        tokenInfos[target].animationURI = animationURI;\\n        emit MediaURIsUpdated({target: target, sender: msg.sender, imageURI: imageURI, animationURI: animationURI});\\n    }\\n\\n    /// @notice Admin function to update description\\n    /// @param target target description\\n    /// @param newDescription new description\\n    function updateDescription(address target, string memory newDescription) external requireSenderAdmin(target) {\\n        tokenInfos[target].description = newDescription;\\n\\n        emit DescriptionUpdated({target: target, sender: msg.sender, newDescription: newDescription});\\n    }\\n\\n    /// @notice Default initializer for edition data from a specific contract\\n    /// @param data data to init with\\n    function initializeWithData(bytes memory data) external {\\n        // data format: description, imageURI, animationURI\\n        (string memory description, string memory imageURI, string memory animationURI) = abi.decode(\\n            data,\\n            (string, string, string)\\n        );\\n\\n        tokenInfos[msg.sender] = TokenEditionInfo({\\n            description: description,\\n            imageURI: imageURI,\\n            animationURI: animationURI\\n        });\\n        emit EditionInitialized({\\n            target: msg.sender,\\n            description: description,\\n            imageURI: imageURI,\\n            animationURI: animationURI\\n        });\\n    }\\n\\n    /// @notice Contract URI information getter\\n    /// @return contract uri (if set)\\n    function contractURI() external view override returns (string memory) {\\n        address target = msg.sender;\\n        TokenEditionInfo storage editionInfo = tokenInfos[target];\\n        IERC721Drop.Configuration memory config = DropConfigGetter(target).config();\\n\\n        return\\n            NFTMetadataRenderer.encodeContractURIJSON({\\n                name: IERC721Metadata(target).name(),\\n                description: editionInfo.description,\\n                imageURI: editionInfo.imageURI,\\n                animationURI: editionInfo.animationURI,\\n                royaltyBPS: uint256(config.royaltyBPS),\\n                royaltyRecipient: config.fundsRecipient\\n            });\\n    }\\n\\n    /// @notice Token URI information getter\\n    /// @param tokenId to get uri for\\n    /// @return contract uri (if set)\\n    function tokenURI(uint256 tokenId) external view override returns (string memory) {\\n        address target = msg.sender;\\n\\n        TokenEditionInfo memory info = tokenInfos[target];\\n        IERC721Drop media = IERC721Drop(target);\\n\\n        uint256 maxSupply = media.saleDetails().maxSupply;\\n\\n        // For open editions, set max supply to 0 for renderer to remove the edition max number\\n        // This will be added back on once the open edition is \\\"finalized\\\"\\n        if (maxSupply == type(uint64).max) {\\n            maxSupply = 0;\\n        }\\n\\n        return\\n            NFTMetadataRenderer.createMetadataEdition({\\n                name: IERC721Metadata(target).name(),\\n                description: info.description,\\n                imageURI: info.imageURI,\\n                animationURI: info.animationURI,\\n                tokenOfEdition: tokenId,\\n                editionSize: maxSupply\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xfab487683b21b5fb88375d6bea872fa44fe1a1dce8e018d98b7ab9903081ad8d\",\"license\":\"MIT\"},\"src/metadata/MetadataRenderAdminCheck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IERC721Drop} from \\\"../interfaces/IERC721Drop.sol\\\";\\n\\ncontract MetadataRenderAdminCheck {\\n    error Access_OnlyAdmin();\\n\\n    /// @notice Modifier to require the sender to be an admin\\n    /// @param target address that the user wants to modify\\n    modifier requireSenderAdmin(address target) {\\n        if (target != msg.sender && !IERC721Drop(target).isAdmin(msg.sender)) {\\n            revert Access_OnlyAdmin();\\n        }\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x36c375053f36963334aca4f1a0021a9347daade1298da2eb6244517db7a014e9\",\"license\":\"MIT\"},\"src/utils/NFTMetadataRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {Base64} from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\n/// NFT metadata library for rendering metadata associated with editions\\nlibrary NFTMetadataRenderer {\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param imageURI URI of image to render for edition\\n    /// @param animationURI URI of animation to render for edition\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        string memory imageURI,\\n        string memory animationURI,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) internal pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(imageURI, animationURI);\\n        bytes memory json = createMetadataJSON(name, description, _tokenMediaData, tokenOfEdition, editionSize);\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    function encodeContractURIJSON(\\n        string memory name,\\n        string memory description,\\n        string memory imageURI,\\n        string memory animationURI,\\n        uint256 royaltyBPS,\\n        address royaltyRecipient\\n    ) internal pure returns (string memory) {\\n        bytes memory imageSpace = bytes(\\\"\\\");\\n        if (bytes(imageURI).length > 0) {\\n            imageSpace = abi.encodePacked('\\\", \\\"image\\\": \\\"', imageURI);\\n        }\\n        bytes memory animationSpace = bytes(\\\"\\\");\\n        if (bytes(animationURI).length > 0) {\\n            animationSpace = abi.encodePacked('\\\", \\\"animation_url\\\": \\\"', animationURI);\\n        }\\n\\n        return\\n            string(\\n                encodeMetadataJSON(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"',\\n                        name,\\n                        '\\\", \\\"description\\\": \\\"',\\n                        description,\\n                        // this is for opensea since they don't respect ERC2981 right now\\n                        '\\\", \\\"seller_fee_basis_points\\\": ',\\n                        Strings.toString(royaltyBPS),\\n                        ', \\\"fee_recipient\\\": \\\"',\\n                        Strings.toHexString(uint256(uint160(royaltyRecipient)), 20),\\n                        imageSpace,\\n                        animationSpace,\\n                        '\\\"}'\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// Function to create the metadata json string for the nft edition\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param mediaData Data for media to include in json object\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) internal pure returns (bytes memory) {\\n        bytes memory editionSizeText;\\n        if (editionSize > 0) {\\n            editionSizeText = abi.encodePacked(\\\"/\\\", Strings.toString(editionSize));\\n        }\\n        return\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                Strings.toString(tokenOfEdition),\\n                editionSizeText,\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                Strings.toString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n    }\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(json)));\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    function tokenMediaData(string memory imageUrl, string memory animationUrl) internal pure returns (string memory) {\\n        bool hasImage = bytes(imageUrl).length > 0;\\n        bool hasAnimation = bytes(animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return string(abi.encodePacked('image\\\": \\\"', imageUrl, '\\\", \\\"animation_url\\\": \\\"', animationUrl, '\\\", \\\"'));\\n        }\\n        if (hasImage) {\\n            return string(abi.encodePacked('image\\\": \\\"', imageUrl, '\\\", \\\"'));\\n        }\\n        if (hasAnimation) {\\n            return string(abi.encodePacked('animation_url\\\": \\\"', animationUrl, '\\\", \\\"'));\\n        }\\n\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x706c49f26ca6fec6cd0664760e7d8f8703e27f6a80c7572584fc4a40fe671527\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ff8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063ba46ae7211610050578063ba46ae72146100b2578063c87b56dd146100dd578063e8a3d485146100fd57600080fd5b80632f17b8f014610077578063856a7ffa1461008c5780638bbb2cf21461009f575b600080fd5b61008a6100853660046113bd565b610105565b005b61008a61009a366004611433565b610239565b61008a6100ad366004611484565b6102f6565b6100c56100c03660046114d4565b6103fe565b6040516100d493929190611541565b60405180910390f35b6100f06100eb36600461157a565b6105b8565b6040516100d49190611593565b6100f061089b565b826001600160a01b03811633148015906101845750604051630935e01b60e21b81523360048201526001600160a01b038216906324d7806c90602401602060405180830381865afa15801561015e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018291906115bb565b155b156101a2576040516302bd6bd160e01b815260040160405180910390fd5b6001600160a01b03841660009081526020819052604090206001016101c7848261165f565b506001600160a01b03841660009081526020819052604090206002016101ed838261165f565b50836001600160a01b03167fc4c1b9223fcebe5f35b9030d3df655018c40e88d70b8a3c63ed851c5d972210f33858560405161022b9392919061171f565b60405180910390a250505050565b6000806000838060200190518101906102529190611798565b60408051606081018252848152602080820185905281830184905233600090815290819052919091208151949750929550909350918190610293908261165f565b50602082015160018201906102a8908261165f565b50604082015160028201906102bd908261165f565b50506040513391507ff889a5cdc62274389379cbfade0f225b1d30b7395177fd6aeaab61662b1c6edf9061022b90869086908690611541565b816001600160a01b03811633148015906103755750604051630935e01b60e21b81523360048201526001600160a01b038216906324d7806c90602401602060405180830381865afa15801561034f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037391906115bb565b155b15610393576040516302bd6bd160e01b815260040160405180910390fd5b6001600160a01b03831660009081526020819052604090206103b5838261165f565b50826001600160a01b03167f36195b44a3184513e02477929207751ea9d67026b917ed74d374a7f9e8c5e4d133846040516103f1929190611816565b60405180910390a2505050565b600060208190529081526040902080548190610419906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610445906115d6565b80156104925780601f1061046757610100808354040283529160200191610492565b820191906000526020600020905b81548152906001019060200180831161047557829003601f168201915b5050505050908060010180546104a7906115d6565b80601f01602080910402602001604051908101604052809291908181526020018280546104d3906115d6565b80156105205780601f106104f557610100808354040283529160200191610520565b820191906000526020600020905b81548152906001019060200180831161050357829003601f168201915b505050505090806002018054610535906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610561906115d6565b80156105ae5780601f10610583576101008083540402835291602001916105ae565b820191906000526020600020905b81548152906001019060200180831161059157829003601f168201915b5050505050905083565b3360008181526020819052604080822081516060818101909352815492949392909190829082906105e8906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610614906115d6565b80156106615780601f1061063657610100808354040283529160200191610661565b820191906000526020600020905b81548152906001019060200180831161064457829003601f168201915b5050505050815260200160018201805461067a906115d6565b80601f01602080910402602001604051908101604052809291908181526020018280546106a6906115d6565b80156106f35780601f106106c8576101008083540402835291602001916106f3565b820191906000526020600020905b8154815290600101906020018083116106d657829003601f168201915b5050505050815260200160028201805461070c906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610738906115d6565b80156107855780601f1061075a57610100808354040283529160200191610785565b820191906000526020600020905b81548152906001019060200180831161076857829003601f168201915b505050505081525050905060008290506000816001600160a01b0316633474a4a66040518163ffffffff1660e01b815260040161016060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190611850565b6101400151905067fffffffffffffffe198101610815575060005b610891846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610856573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087e9190810190611909565b8451602086015160408701518a86610b54565b9695505050505050565b3360008181526020819052604080822081517f79502c55000000000000000000000000000000000000000000000000000000008152915160609493919284916379502c55916004808201926080929091908290030181865afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610929919061193e565b9050610b4c836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561096c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109949190810190611909565b835484906109a1906115d6565b80601f01602080910402602001604051908101604052809291908181526020018280546109cd906115d6565b8015610a1a5780601f106109ef57610100808354040283529160200191610a1a565b820191906000526020600020905b8154815290600101906020018083116109fd57829003601f168201915b5050505050846001018054610a2e906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5a906115d6565b8015610aa75780601f10610a7c57610100808354040283529160200191610aa7565b820191906000526020600020905b815481529060010190602001808311610a8a57829003601f168201915b5050505050856002018054610abb906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae7906115d6565b8015610b345780601f10610b0957610100808354040283529160200191610b34565b820191906000526020600020905b815481529060010190602001808311610b1757829003601f168201915b5050505050856040015161ffff168660600151610b8b565b935050505090565b60606000610b628686610c4e565b90506000610b738989848888610cde565b9050610b7e81610d5a565b9998505050505050505050565b60408051602081019091526000815284516060919015610bc85785604051602001610bb691906119e4565b60405160208183030381529060405290505b604080516020810190915260008152855115610c015785604051602001610bef9190611a29565b60405160208183030381529060405290505b610b7e8989610c0f88610d8b565b610c23886001600160a01b03166014610e2b565b8686604051602001610c3a96959493929190611a6e565b604051602081830303815290604052610d5a565b81518151606091158015911515908290610c655750805b15610c95578484604051602001610c7d929190611bc8565b60405160208183030381529060405292505050610cd8565b8115610cac5784604051602001610c7d9190611c46565b8015610cc35783604051602001610c7d9190611c85565b60405180602001604052806000815250925050505b92915050565b6060808215610d1257610cf083610d8b565b604051602001610d009190611cd8565b60405160208183030381529060405290505b86610d1c85610d8b565b828888610d2889610d8b565b8c604051602001610d3f9796959493929190611d1d565b60405160208183030381529060405291505095945050505050565b6060610d6582611079565b604051602001610d759190611eae565b6040516020818303038152906040529050919050565b60606000610d98836111cc565b600101905060008167ffffffffffffffff811115610db857610db86112c6565b6040519080825280601f01601f191660200182016040528015610de2576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610dec57509392505050565b60606000610e3a836002611f09565b610e45906002611f20565b67ffffffffffffffff811115610e5d57610e5d6112c6565b6040519080825280601f01601f191660200182016040528015610e87576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610ebe57610ebe611f33565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610f2157610f21611f33565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610f5d846002611f09565b610f68906001611f20565b90505b6001811115611005577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610fa957610fa9611f33565b1a60f81b828281518110610fbf57610fbf611f33565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93610ffe81611f49565b9050610f6b565b508315611072576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b9392505050565b6060815160000361109857505060408051602081019091526000815290565b6000604051806060016040528060408152602001611f8360409139905060006003845160026110c79190611f20565b6110d19190611f60565b6110dc906004611f09565b67ffffffffffffffff8111156110f4576110f46112c6565b6040519080825280601f01601f19166020018201604052801561111e576020820181803683370190505b509050600182016020820185865187015b8082101561118a576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061112f565b50506003865106600181146111a657600281146111b9576111c1565b603d6001830353603d60028303536111c1565b603d60018303535b509195945050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611215577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611241576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061125f57662386f26fc10000830492506010015b6305f5e1008310611277576305f5e100830492506008015b612710831061128b57612710830492506004015b6064831061129d576064830492506002015b600a8310610cd85760010192915050565b6001600160a01b03811681146112c357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611300576113006112c6565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561132f5761132f6112c6565b604052919050565b600067ffffffffffffffff821115611351576113516112c6565b50601f01601f191660200190565b600061137261136d84611337565b611306565b905082815283838301111561138657600080fd5b828260208301376000602084830101529392505050565b600082601f8301126113ae57600080fd5b6110728383356020850161135f565b6000806000606084860312156113d257600080fd5b83356113dd816112ae565b9250602084013567ffffffffffffffff808211156113fa57600080fd5b6114068783880161139d565b9350604086013591508082111561141c57600080fd5b506114298682870161139d565b9150509250925092565b60006020828403121561144557600080fd5b813567ffffffffffffffff81111561145c57600080fd5b8201601f8101841361146d57600080fd5b61147c8482356020840161135f565b949350505050565b6000806040838503121561149757600080fd5b82356114a2816112ae565b9150602083013567ffffffffffffffff8111156114be57600080fd5b6114ca8582860161139d565b9150509250929050565b6000602082840312156114e657600080fd5b8135611072816112ae565b60005b8381101561150c5781810151838201526020016114f4565b50506000910152565b6000815180845261152d8160208601602086016114f1565b601f01601f19169290920160200192915050565b6060815260006115546060830186611515565b82810360208401526115668186611515565b905082810360408401526108918185611515565b60006020828403121561158c57600080fd5b5035919050565b6020815260006110726020830184611515565b805180151581146115b657600080fd5b919050565b6000602082840312156115cd57600080fd5b611072826115a6565b600181811c908216806115ea57607f821691505b60208210810361160a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561165a57600081815260208120601f850160051c810160208610156116375750805b601f850160051c820191505b8181101561165657828155600101611643565b5050505b505050565b815167ffffffffffffffff811115611679576116796112c6565b61168d8161168784546115d6565b84611610565b602080601f8311600181146116c257600084156116aa5750858301515b600019600386901b1c1916600185901b178555611656565b600085815260208120601f198616915b828110156116f1578886015182559484019460019091019084016116d2565b508582101561170f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03841681526060602082015260006117416060830185611515565b82810360408401526108918185611515565b600082601f83011261176457600080fd5b815161177261136d82611337565b81815284602083860101111561178757600080fd5b61147c8260208301602087016114f1565b6000806000606084860312156117ad57600080fd5b835167ffffffffffffffff808211156117c557600080fd5b6117d187838801611753565b945060208601519150808211156117e757600080fd5b6117f387838801611753565b9350604086015191508082111561180957600080fd5b5061142986828701611753565b6001600160a01b038316815260406020820152600061147c6040830184611515565b805167ffffffffffffffff811681146115b657600080fd5b6000610160828403121561186357600080fd5b61186b6112dc565b611874836115a6565b8152611882602084016115a6565b60208201526040830151604082015261189d60608401611838565b60608201526118ae60808401611838565b60808201526118bf60a08401611838565b60a08201526118d060c08401611838565b60c082015260e0838101519082015261010080840151908201526101208084015190820152610140928301519281019290925250919050565b60006020828403121561191b57600080fd5b815167ffffffffffffffff81111561193257600080fd5b61147c84828501611753565b60006080828403121561195057600080fd5b6040516080810181811067ffffffffffffffff82111715611973576119736112c6565b6040528251611981816112ae565b815261198f60208401611838565b6020820152604083015161ffff811681146119a957600080fd5b604082015260608301516119bc816112ae565b60608201529392505050565b600081516119da8185602086016114f1565b9290920192915050565b7f222c2022696d616765223a202200000000000000000000000000000000000000815260008251611a1c81600d8501602087016114f1565b91909101600d0192915050565b7f222c2022616e696d6174696f6e5f75726c223a20220000000000000000000000815260008251611a618160158501602087016114f1565b9190910160150192915050565b7f7b226e616d65223a2022000000000000000000000000000000000000000000008152600087516020611aa782600a8601838d016114f1565b7f222c20226465736372697074696f6e223a202200000000000000000000000000600a928501928301528851611ae381601d8501848d016114f1565b7f222c202273656c6c65725f6665655f62617369735f706f696e7473223a200000601d93909101928301528751611b2081603b8501848c016114f1565b7f2c20226665655f726563697069656e74223a2022000000000000000000000000603b93909101928301528651611b5d81604f8501848b016114f1565b8651920191611b7281604f8501848a016114f1565b8551920191611b8781604f85018489016114f1565b611bb9604f828501017f227d000000000000000000000000000000000000000000000000000000000000815260020190565b9b9a5050505050505050505050565b6834b6b0b3b2911d101160b91b815260008351611bec8160098501602088016114f1565b7f222c2022616e696d6174696f6e5f75726c223a202200000000000000000000006009918401918201528351611c2981601e8401602088016114f1565b631116101160e11b601e9290910191820152602201949350505050565b6834b6b0b3b2911d101160b91b815260008251611c6a8160098501602087016114f1565b631116101160e11b6009939091019283015250600d01919050565b7f616e696d6174696f6e5f75726c223a2022000000000000000000000000000000815260008251611cbd8160118501602087016114f1565b631116101160e11b6011939091019283015250601501919050565b7f2f00000000000000000000000000000000000000000000000000000000000000815260008251611d108160018501602087016114f1565b9190910160010192915050565b7f7b226e616d65223a202200000000000000000000000000000000000000000000815260008851611d5581600a850160208d016114f1565b7f2000000000000000000000000000000000000000000000000000000000000000600a918401918201528851611d9281600b840160208d016114f1565b8851910190611da881600b840160208c016114f1565b808201915050631116101160e11b80600b8301527f6465736372697074696f6e223a20220000000000000000000000000000000000600f8301528751611df581601e850160208c016114f1565b601e920191820152611ea0611e77611e71611e48611e42611e19602287018c6119c8565b7f70726f70657274696573223a207b226e756d626572223a200000000000000000815260180190565b896119c8565b7f2c20226e616d65223a20220000000000000000000000000000000000000000008152600b0190565b866119c8565b7f227d7d0000000000000000000000000000000000000000000000000000000000815260030190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611ee681601d8501602087016114f1565b91909101601d0192915050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610cd857610cd8611ef3565b80820180821115610cd857610cd8611ef3565b634e487b7160e01b600052603260045260246000fd5b600081611f5857611f58611ef3565b506000190190565b600082611f7d57634e487b7160e01b600052601260045260246000fd5b50049056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212209e1b1e4da5ce34ae581f6c735be8d007dad37a149b246410fa61b2239d757eb264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063ba46ae7211610050578063ba46ae72146100b2578063c87b56dd146100dd578063e8a3d485146100fd57600080fd5b80632f17b8f014610077578063856a7ffa1461008c5780638bbb2cf21461009f575b600080fd5b61008a6100853660046113bd565b610105565b005b61008a61009a366004611433565b610239565b61008a6100ad366004611484565b6102f6565b6100c56100c03660046114d4565b6103fe565b6040516100d493929190611541565b60405180910390f35b6100f06100eb36600461157a565b6105b8565b6040516100d49190611593565b6100f061089b565b826001600160a01b03811633148015906101845750604051630935e01b60e21b81523360048201526001600160a01b038216906324d7806c90602401602060405180830381865afa15801561015e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018291906115bb565b155b156101a2576040516302bd6bd160e01b815260040160405180910390fd5b6001600160a01b03841660009081526020819052604090206001016101c7848261165f565b506001600160a01b03841660009081526020819052604090206002016101ed838261165f565b50836001600160a01b03167fc4c1b9223fcebe5f35b9030d3df655018c40e88d70b8a3c63ed851c5d972210f33858560405161022b9392919061171f565b60405180910390a250505050565b6000806000838060200190518101906102529190611798565b60408051606081018252848152602080820185905281830184905233600090815290819052919091208151949750929550909350918190610293908261165f565b50602082015160018201906102a8908261165f565b50604082015160028201906102bd908261165f565b50506040513391507ff889a5cdc62274389379cbfade0f225b1d30b7395177fd6aeaab61662b1c6edf9061022b90869086908690611541565b816001600160a01b03811633148015906103755750604051630935e01b60e21b81523360048201526001600160a01b038216906324d7806c90602401602060405180830381865afa15801561034f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037391906115bb565b155b15610393576040516302bd6bd160e01b815260040160405180910390fd5b6001600160a01b03831660009081526020819052604090206103b5838261165f565b50826001600160a01b03167f36195b44a3184513e02477929207751ea9d67026b917ed74d374a7f9e8c5e4d133846040516103f1929190611816565b60405180910390a2505050565b600060208190529081526040902080548190610419906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610445906115d6565b80156104925780601f1061046757610100808354040283529160200191610492565b820191906000526020600020905b81548152906001019060200180831161047557829003601f168201915b5050505050908060010180546104a7906115d6565b80601f01602080910402602001604051908101604052809291908181526020018280546104d3906115d6565b80156105205780601f106104f557610100808354040283529160200191610520565b820191906000526020600020905b81548152906001019060200180831161050357829003601f168201915b505050505090806002018054610535906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610561906115d6565b80156105ae5780601f10610583576101008083540402835291602001916105ae565b820191906000526020600020905b81548152906001019060200180831161059157829003601f168201915b5050505050905083565b3360008181526020819052604080822081516060818101909352815492949392909190829082906105e8906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610614906115d6565b80156106615780601f1061063657610100808354040283529160200191610661565b820191906000526020600020905b81548152906001019060200180831161064457829003601f168201915b5050505050815260200160018201805461067a906115d6565b80601f01602080910402602001604051908101604052809291908181526020018280546106a6906115d6565b80156106f35780601f106106c8576101008083540402835291602001916106f3565b820191906000526020600020905b8154815290600101906020018083116106d657829003601f168201915b5050505050815260200160028201805461070c906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610738906115d6565b80156107855780601f1061075a57610100808354040283529160200191610785565b820191906000526020600020905b81548152906001019060200180831161076857829003601f168201915b505050505081525050905060008290506000816001600160a01b0316633474a4a66040518163ffffffff1660e01b815260040161016060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190611850565b6101400151905067fffffffffffffffe198101610815575060005b610891846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610856573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087e9190810190611909565b8451602086015160408701518a86610b54565b9695505050505050565b3360008181526020819052604080822081517f79502c55000000000000000000000000000000000000000000000000000000008152915160609493919284916379502c55916004808201926080929091908290030181865afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610929919061193e565b9050610b4c836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561096c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109949190810190611909565b835484906109a1906115d6565b80601f01602080910402602001604051908101604052809291908181526020018280546109cd906115d6565b8015610a1a5780601f106109ef57610100808354040283529160200191610a1a565b820191906000526020600020905b8154815290600101906020018083116109fd57829003601f168201915b5050505050846001018054610a2e906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5a906115d6565b8015610aa75780601f10610a7c57610100808354040283529160200191610aa7565b820191906000526020600020905b815481529060010190602001808311610a8a57829003601f168201915b5050505050856002018054610abb906115d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae7906115d6565b8015610b345780601f10610b0957610100808354040283529160200191610b34565b820191906000526020600020905b815481529060010190602001808311610b1757829003601f168201915b5050505050856040015161ffff168660600151610b8b565b935050505090565b60606000610b628686610c4e565b90506000610b738989848888610cde565b9050610b7e81610d5a565b9998505050505050505050565b60408051602081019091526000815284516060919015610bc85785604051602001610bb691906119e4565b60405160208183030381529060405290505b604080516020810190915260008152855115610c015785604051602001610bef9190611a29565b60405160208183030381529060405290505b610b7e8989610c0f88610d8b565b610c23886001600160a01b03166014610e2b565b8686604051602001610c3a96959493929190611a6e565b604051602081830303815290604052610d5a565b81518151606091158015911515908290610c655750805b15610c95578484604051602001610c7d929190611bc8565b60405160208183030381529060405292505050610cd8565b8115610cac5784604051602001610c7d9190611c46565b8015610cc35783604051602001610c7d9190611c85565b60405180602001604052806000815250925050505b92915050565b6060808215610d1257610cf083610d8b565b604051602001610d009190611cd8565b60405160208183030381529060405290505b86610d1c85610d8b565b828888610d2889610d8b565b8c604051602001610d3f9796959493929190611d1d565b60405160208183030381529060405291505095945050505050565b6060610d6582611079565b604051602001610d759190611eae565b6040516020818303038152906040529050919050565b60606000610d98836111cc565b600101905060008167ffffffffffffffff811115610db857610db86112c6565b6040519080825280601f01601f191660200182016040528015610de2576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610dec57509392505050565b60606000610e3a836002611f09565b610e45906002611f20565b67ffffffffffffffff811115610e5d57610e5d6112c6565b6040519080825280601f01601f191660200182016040528015610e87576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610ebe57610ebe611f33565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610f2157610f21611f33565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610f5d846002611f09565b610f68906001611f20565b90505b6001811115611005577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610fa957610fa9611f33565b1a60f81b828281518110610fbf57610fbf611f33565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93610ffe81611f49565b9050610f6b565b508315611072576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b9392505050565b6060815160000361109857505060408051602081019091526000815290565b6000604051806060016040528060408152602001611f8360409139905060006003845160026110c79190611f20565b6110d19190611f60565b6110dc906004611f09565b67ffffffffffffffff8111156110f4576110f46112c6565b6040519080825280601f01601f19166020018201604052801561111e576020820181803683370190505b509050600182016020820185865187015b8082101561118a576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061112f565b50506003865106600181146111a657600281146111b9576111c1565b603d6001830353603d60028303536111c1565b603d60018303535b509195945050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611215577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611241576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061125f57662386f26fc10000830492506010015b6305f5e1008310611277576305f5e100830492506008015b612710831061128b57612710830492506004015b6064831061129d576064830492506002015b600a8310610cd85760010192915050565b6001600160a01b03811681146112c357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611300576113006112c6565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561132f5761132f6112c6565b604052919050565b600067ffffffffffffffff821115611351576113516112c6565b50601f01601f191660200190565b600061137261136d84611337565b611306565b905082815283838301111561138657600080fd5b828260208301376000602084830101529392505050565b600082601f8301126113ae57600080fd5b6110728383356020850161135f565b6000806000606084860312156113d257600080fd5b83356113dd816112ae565b9250602084013567ffffffffffffffff808211156113fa57600080fd5b6114068783880161139d565b9350604086013591508082111561141c57600080fd5b506114298682870161139d565b9150509250925092565b60006020828403121561144557600080fd5b813567ffffffffffffffff81111561145c57600080fd5b8201601f8101841361146d57600080fd5b61147c8482356020840161135f565b949350505050565b6000806040838503121561149757600080fd5b82356114a2816112ae565b9150602083013567ffffffffffffffff8111156114be57600080fd5b6114ca8582860161139d565b9150509250929050565b6000602082840312156114e657600080fd5b8135611072816112ae565b60005b8381101561150c5781810151838201526020016114f4565b50506000910152565b6000815180845261152d8160208601602086016114f1565b601f01601f19169290920160200192915050565b6060815260006115546060830186611515565b82810360208401526115668186611515565b905082810360408401526108918185611515565b60006020828403121561158c57600080fd5b5035919050565b6020815260006110726020830184611515565b805180151581146115b657600080fd5b919050565b6000602082840312156115cd57600080fd5b611072826115a6565b600181811c908216806115ea57607f821691505b60208210810361160a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561165a57600081815260208120601f850160051c810160208610156116375750805b601f850160051c820191505b8181101561165657828155600101611643565b5050505b505050565b815167ffffffffffffffff811115611679576116796112c6565b61168d8161168784546115d6565b84611610565b602080601f8311600181146116c257600084156116aa5750858301515b600019600386901b1c1916600185901b178555611656565b600085815260208120601f198616915b828110156116f1578886015182559484019460019091019084016116d2565b508582101561170f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03841681526060602082015260006117416060830185611515565b82810360408401526108918185611515565b600082601f83011261176457600080fd5b815161177261136d82611337565b81815284602083860101111561178757600080fd5b61147c8260208301602087016114f1565b6000806000606084860312156117ad57600080fd5b835167ffffffffffffffff808211156117c557600080fd5b6117d187838801611753565b945060208601519150808211156117e757600080fd5b6117f387838801611753565b9350604086015191508082111561180957600080fd5b5061142986828701611753565b6001600160a01b038316815260406020820152600061147c6040830184611515565b805167ffffffffffffffff811681146115b657600080fd5b6000610160828403121561186357600080fd5b61186b6112dc565b611874836115a6565b8152611882602084016115a6565b60208201526040830151604082015261189d60608401611838565b60608201526118ae60808401611838565b60808201526118bf60a08401611838565b60a08201526118d060c08401611838565b60c082015260e0838101519082015261010080840151908201526101208084015190820152610140928301519281019290925250919050565b60006020828403121561191b57600080fd5b815167ffffffffffffffff81111561193257600080fd5b61147c84828501611753565b60006080828403121561195057600080fd5b6040516080810181811067ffffffffffffffff82111715611973576119736112c6565b6040528251611981816112ae565b815261198f60208401611838565b6020820152604083015161ffff811681146119a957600080fd5b604082015260608301516119bc816112ae565b60608201529392505050565b600081516119da8185602086016114f1565b9290920192915050565b7f222c2022696d616765223a202200000000000000000000000000000000000000815260008251611a1c81600d8501602087016114f1565b91909101600d0192915050565b7f222c2022616e696d6174696f6e5f75726c223a20220000000000000000000000815260008251611a618160158501602087016114f1565b9190910160150192915050565b7f7b226e616d65223a2022000000000000000000000000000000000000000000008152600087516020611aa782600a8601838d016114f1565b7f222c20226465736372697074696f6e223a202200000000000000000000000000600a928501928301528851611ae381601d8501848d016114f1565b7f222c202273656c6c65725f6665655f62617369735f706f696e7473223a200000601d93909101928301528751611b2081603b8501848c016114f1565b7f2c20226665655f726563697069656e74223a2022000000000000000000000000603b93909101928301528651611b5d81604f8501848b016114f1565b8651920191611b7281604f8501848a016114f1565b8551920191611b8781604f85018489016114f1565b611bb9604f828501017f227d000000000000000000000000000000000000000000000000000000000000815260020190565b9b9a5050505050505050505050565b6834b6b0b3b2911d101160b91b815260008351611bec8160098501602088016114f1565b7f222c2022616e696d6174696f6e5f75726c223a202200000000000000000000006009918401918201528351611c2981601e8401602088016114f1565b631116101160e11b601e9290910191820152602201949350505050565b6834b6b0b3b2911d101160b91b815260008251611c6a8160098501602087016114f1565b631116101160e11b6009939091019283015250600d01919050565b7f616e696d6174696f6e5f75726c223a2022000000000000000000000000000000815260008251611cbd8160118501602087016114f1565b631116101160e11b6011939091019283015250601501919050565b7f2f00000000000000000000000000000000000000000000000000000000000000815260008251611d108160018501602087016114f1565b9190910160010192915050565b7f7b226e616d65223a202200000000000000000000000000000000000000000000815260008851611d5581600a850160208d016114f1565b7f2000000000000000000000000000000000000000000000000000000000000000600a918401918201528851611d9281600b840160208d016114f1565b8851910190611da881600b840160208c016114f1565b808201915050631116101160e11b80600b8301527f6465736372697074696f6e223a20220000000000000000000000000000000000600f8301528751611df581601e850160208c016114f1565b601e920191820152611ea0611e77611e71611e48611e42611e19602287018c6119c8565b7f70726f70657274696573223a207b226e756d626572223a200000000000000000815260180190565b896119c8565b7f2c20226e616d65223a20220000000000000000000000000000000000000000008152600b0190565b866119c8565b7f227d7d0000000000000000000000000000000000000000000000000000000000815260030190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611ee681601d8501602087016114f1565b91909101601d0192915050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610cd857610cd8611ef3565b80820180821115610cd857610cd8611ef3565b634e487b7160e01b600052603260045260246000fd5b600081611f5857611f58611ef3565b506000190190565b600082611f7d57634e487b7160e01b600052601260045260246000fd5b50049056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212209e1b1e4da5ce34ae581f6c735be8d007dad37a149b246410fa61b2239d757eb264736f6c63430008110033",
  "devdoc": {
    "events": {
      "DescriptionUpdated(address,address,string)": {
        "details": "admin function indexer feedback"
      },
      "EditionInitialized(address,string,string,string)": {
        "details": "admin function indexer feedback"
      }
    },
    "kind": "dev",
    "methods": {
      "contractURI()": {
        "returns": {
          "_0": "contract uri (if set)"
        }
      },
      "initializeWithData(bytes)": {
        "params": {
          "data": "data to init with"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "to get uri for"
        },
        "returns": {
          "_0": "contract uri (if set)"
        }
      },
      "updateDescription(address,string)": {
        "params": {
          "newDescription": "new description",
          "target": "target description"
        }
      },
      "updateMediaURIs(address,string,string)": {
        "params": {
          "animationURI": "new animation uri address",
          "imageURI": "new image uri address",
          "target": "target for contract to update metadata for"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DescriptionUpdated(address,address,string)": {
        "notice": "Description updated for this edition"
      },
      "EditionInitialized(address,string,string,string)": {
        "notice": "Event for a new edition initialized"
      },
      "MediaURIsUpdated(address,address,string,string)": {
        "notice": "Event for updated Media URIs"
      }
    },
    "kind": "user",
    "methods": {
      "contractURI()": {
        "notice": "Contract URI information getter"
      },
      "initializeWithData(bytes)": {
        "notice": "Default initializer for edition data from a specific contract"
      },
      "tokenInfos(address)": {
        "notice": "Token information mapping storage"
      },
      "tokenURI(uint256)": {
        "notice": "Token URI information getter"
      },
      "updateDescription(address,string)": {
        "notice": "Admin function to update description"
      },
      "updateMediaURIs(address,string,string)": {
        "notice": "Update media URIs"
      }
    },
    "notice": "EditionMetadataRenderer for editions support",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6907,
        "contract": "src/metadata/EditionMetadataRenderer.sol:EditionMetadataRenderer",
        "label": "tokenInfos",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(TokenEditionInfo)6870_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(TokenEditionInfo)6870_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EditionMetadataRenderer.TokenEditionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenEditionInfo)6870_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenEditionInfo)6870_storage": {
        "encoding": "inplace",
        "label": "struct EditionMetadataRenderer.TokenEditionInfo",
        "members": [
          {
            "astId": 6865,
            "contract": "src/metadata/EditionMetadataRenderer.sol:EditionMetadataRenderer",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6867,
            "contract": "src/metadata/EditionMetadataRenderer.sol:EditionMetadataRenderer",
            "label": "imageURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6869,
            "contract": "src/metadata/EditionMetadataRenderer.sol:EditionMetadataRenderer",
            "label": "animationURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}